import{M as s,_ as a,r as n,o as l,c as p,u as o,t as e,e as t,F as c,n as r,j as y,A as F,B as D,d as i,a as A}from"./app.f3eebbf7.js";const C=s(Array.from(Array(3).keys()).map((s=>Array.from(Array(3).keys()).map((s=>"")))));function d(s){if(!s.startsWith("="))return s;s=s.slice(1).replace(/\b([A-Z])(\d{1,2})\b/g,((s,a,n)=>`get(${a.charCodeAt(0)-65},${n})`));try{return new Function("get",`return ${s}`)(u)}catch(a){return`#ERROR ${a}`}}function u(s,a){const n=d(C[s][a]),l=Number(n);return Number.isFinite(l)?l:n}C[0][0]="1",C[0][1]="2",C[0][2]="= A0 + A1";const g=["title"],h=["value"],b={key:1},f=a({__name:"SpreadSheetCell",props:{c:Number,r:Number},setup(s){const a=s,t=n(!1);function c(s){t.value=!1,C[a.c][a.r]=s.target.value.trim()}return(a,n)=>(l(),p("div",{class:"cell",title:o(C)[s.c][s.r],onClick:n[1]||(n[1]=s=>t.value=!0)},[t.value?(l(),p("input",{key:0,value:o(C)[s.c][s.r],onChange:c,onBlur:c,onVnodeMounted:n[0]||(n[0]=({el:s})=>s.focus())},null,40,h)):(l(),p("span",b,e(o(d)(o(C)[s.c][s.r])),1))],8,g))}},[["__scopeId","data-v-3efd69a9"]]),v=(s=>(F("data-v-dffbe810"),s=s(),D(),s))((()=>t("th",null,null,-1))),m=a({__name:"SpreadSheet",setup(s){const a=C.map(((s,a)=>String.fromCharCode(65+a)));return(s,n)=>(l(),p("table",null,[t("thead",null,[t("tr",null,[v,(l(!0),p(c,null,r(o(a),(s=>(l(),p("th",null,e(s),1)))),256))])]),t("tbody",null,[(l(!0),p(c,null,r(o(C)[0].length,(s=>(l(),p("tr",null,[t("th",null,e(s-1),1),(l(!0),p(c,null,r(o(a),((a,n)=>(l(),p("td",null,[y(f,{r:s-1,c:n},null,8,["r","c"])])))),256))])))),256))])]))}},[["__scopeId","data-v-dffbe810"]]),I=t("h1",{id:"reactivity-in-depth",tabindex:"-1"},[i("深入响应式系统 "),t("a",{class:"header-anchor",href:"#reactivity-in-depth","aria-hidden":"true"},"#")],-1),x=t("p",null,"Vue 最标志性的功能就是其低侵入性的响应式系统。组件状态都是由响应式的 JavaScript 对象组成的。当更改它们时，视图会随即自动更新。这让状态管理更加简单直观，但理解它是如何工作的也是很重要的，这可以帮助我们避免一些常见的陷阱。在本节中，我们将深入研究 Vue 响应性系统的一些底层细节。",-1),k=t("h2",{id:"what-is-reactivity",tabindex:"-1"},[i("什么是响应性 "),t("a",{class:"header-anchor",href:"#what-is-reactivity","aria-hidden":"true"},"#")],-1),Z=t("p",null,"这个术语在今天的各种编程讨论中经常出现，但人们说它的时候究竟是想表达什么意思呢？本质上，响应性是一种可以使我们声明式地处理变化的编程范式。一个经常被拿来当作典型例子的用例即是 Excel 表格：",-1),V=A("",79),G=JSON.parse('{"title":"深入响应式系统","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"什么是响应性","slug":"what-is-reactivity","link":"#what-is-reactivity","children":[]},{"level":2,"title":"Vue 中的响应性是如何工作的","slug":"how-reactivity-works-in-vue","link":"#how-reactivity-works-in-vue","children":[]},{"level":2,"title":"运行时 vs. 编译时响应性","slug":"runtime-vs-compile-time-reactivity","link":"#runtime-vs-compile-time-reactivity","children":[]},{"level":2,"title":"响应性调试","slug":"reactivity-debugging","link":"#reactivity-debugging","children":[{"level":3,"title":"组件调试钩子","slug":"component-debugging-hooks","link":"#component-debugging-hooks","children":[]},{"level":3,"title":"计算属性调试","slug":"computed-debugging","link":"#computed-debugging","children":[]},{"level":3,"title":"侦听器调试","slug":"watcher-debugging","link":"#watcher-debugging","children":[]}]},{"level":2,"title":"与外部状态系统集成","slug":"integration-with-external-state-systems","link":"#integration-with-external-state-systems","children":[{"level":3,"title":"不可变数据","slug":"immutable-data","link":"#immutable-data","children":[]},{"level":3,"title":"状态机","slug":"state-machines","link":"#state-machines","children":[]},{"level":3,"title":"RxJS","slug":"rxjs","link":"#rxjs","children":[]}]}],"relativePath":"guide/extras/reactivity-in-depth.md"}'),E=Object.assign({name:"guide/extras/reactivity-in-depth.md"},{setup:s=>(s,a)=>(l(),p("div",null,[I,x,k,Z,y(m),V]))});export{G as __pageData,E as default};
